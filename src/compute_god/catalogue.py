"""Blueprint definitions for the Compute-God guidance desk catalogue."""

from __future__ import annotations

from typing import Iterator, Mapping

from .guidance import DeskStation, GuidanceDesk
from .information_architecture import restructure_information_architecture

StationLayout = tuple[str, str, tuple[str, ...]]

_RAW_STATION_BLUEPRINT: tuple[StationLayout, ...] = (
    (
        "core",
        "Core runtime primitives for building universes and solving fixed points.",
        (
            "ApplyFn",
            "PredicateFn",
            "Metric",
            "State",
            "RuleContext",
            "Rule",
            "rule",
            "God",
            "Universe",
            "combine_observers",
            "fixpoint",
            "FixpointEngine",
            "FixpointResult",
            "Observer",
            "ObserverEvent",
            "NoopObserver",
        ),
    ),
    (
        "landscape",
        "景观高度学习与扩散平衡。",
        (
            "LandscapeSample",
            "LandscapeLearningParameters",
            "initialise_grid",
            "landscape_learning_universe",
            "learn_landscape",
        ),
    ),
    (
        "gift",
        "用景观学习雕刻手工礼物灵感。",
        (
            "GiftWish",
            "prepare_gift_canvas",
            "sculpt_gift_landscape",
            "describe_gift_plan",
        ),
    ),
    (
        "bonds",
        "Bond-building blueprints connecting Miyu and companions across universes.",
        (
            "MiyuBond",
            "bond_miyu",
            "MiuchanBlueprint",
            "bond_miuchan",
            "miuchan_metric",
            "miuchan_universe",
            "run_miuchan_universe",
        ),
    ),
    (
        "august",
        "Narrative constructs capturing endless August loops and moods.",
        (
            "EndlessAugust",
        ),
    ),
    (
        "bingzi",
        "Thermal dual phenomena of the 冰子 universe and its asymmetries.",
        (
            "Bingzi",
            "Pingzi",
            "PingziRelation",
            "peculiar_asymmetry",
            "qianli_bingfeng",
            "冰子",
            "千里冰封",
            "瓶子",
            "平子",
            "Yuzi",
            "Qizi",
            "YuziParameters",
            "QiziParameters",
            "GridSummary",
            "QuantumThermalDual",
            "quantum_thermal_dual",
            "玉子",
            "琦子",
            "量子热对偶",
        ),
    ),
    (
        "sanzi",
        "三子与维子的策略总览。",
        (
            "Sanzi",
            "SanziOverview",
            "Weizi",
            "三子",
            "维子",
        ),
    ),
    (
        "siqianzi",
        "死前子网络与热对偶变换。",
        (
            "Siqianzi",
            "SiqianziDualNode",
            "SiqianziDualEdge",
            "SiqianziThermalNetwork",
            "thermal_dual_network",
            "死前子",
            "死前子节点",
            "死前子连线",
            "死前子网络",
            "死前子热对偶网络",
        ),
    ),
    (
        "dianfen_changzi",
        "淀粉肠子网络博弈与松弛均衡。",
        (
            "StarchSausagePlayer",
            "StarchSausageNetworkGame",
            "StarchSausageEquilibrium",
            "build_starch_sausage_game",
            "simulate_starch_sausage_game",
            "淀粉肠子玩家",
            "淀粉肠子网络",
            "淀粉肠子均衡",
            "淀粉肠子网络博弈",
        ),
    ),
    (
        "jizi",
        "自机子热对偶与其伙伴体系。",
        (
            "Jizi",
            "Zijiji",
            "ThermalDual",
            "thermal_dual",
            "机子",
            "日子",
            "子机机",
            "月子",
            "热对偶",
            "自机子对偶",
        ),
    ),
    (
        "eternity_end",
        "永恒终结热对偶研究。",
        (
            "EternityEndThermalDual",
            "eternity_end_thermal_dual",
            "永恒终结热对偶",
        ),
    ),
    (
        "jiahao",
        "嘉豪最大热对偶网络的变体与构造。",
        (
            "JiahaoMaximumThermalDual",
            "jiahao_max_thermal_dual",
            "jiahao_max_thermal_dual_from_network",
            "嘉豪最大热对偶",
        ),
    ),
    (
        "yihong",
        "一弘与美羽之间的热对偶。",
        (
            "YihongMiyuThermalDual",
            "yihong_miyu_thermal_dual",
            "一弘美羽热对偶",
        ),
    ),
    (
        "jiaose",
        "角子与色子的色角对偶关系。",
        (
            "Jiaozi",
            "Sezi",
            "ChromaticDual",
            "chromatic_dual",
            "角子",
            "色子",
            "色角对偶",
        ),
    ),
    (
        "culinary",
        "风味油そば宇宙的配方与画布。",
        (
            "AburaSobaProfile",
            "NoodleCanvas",
            "OilLayer",
            "TareBlend",
            "Topping",
            "assemble_abura_soba",
            "油そば",
        ),
    ),
    (
        "entanglement",
        "纠子、缠子与纠缠子的关联度量。",
        (
            "Entangler",
            "EntanglementSnapshot",
            "纠子",
            "缠子",
            "纠缠子",
        ),
    ),
    (
        "anti_quantum",
        "抗量子算法与对偶建模。",
        (
            "AntiQuantumAlgorithm",
            "AntiQuantumDual",
            "QuantumAttackSurface",
            "anti_quantum_dual",
            "抗量子算法",
            "抗量子对偶",
            "量子攻击面",
        ),
    ),
    (
        "existence",
        "存在性与稳定性的见证构造。",
        (
            "ExistenceWitness",
            "StabilityWitness",
            "存在子",
            "稳定子",
        ),
    ),
    (
        "love_wishing",
        "愿望机宇宙与其不动点推演。",
        (
            "WishParameters",
            "love_wishing_fixpoint",
            "love_wishing_map",
            "love_wishing_metric",
            "love_wishing_rule",
            "love_wishing_universe",
            "wish_granted",
        ),
    ),
    (
        "courtship",
        "求爱上同调的链复形。",
        (
            "CochainSpace",
            "CourtshipCochainComplex",
            "CourtshipDifferential",
            "courtship_cohomology_story",
        ),
    ),
    (
        "ctc",
        "闭合类时曲线的优化求解。",
        (
            "ClosedTimelikeCurve",
            "CTCOptimisationResult",
            "optimise_closed_timelike_curve",
        ),
    ),
    (
        "threshold",
        "门限空间的布局与最优化。",
        (
            "ThresholdSpace",
            "ThresholdOptimisationResult",
            "optimise_threshold_space",
        ),
    ),
    (
        "vulkan",
        "Vulkan 渲染管线蓝图与调度规划。",
        (
            "DescriptorBinding",
            "DescriptorSetLayout",
            "RenderAttachment",
            "RenderPassBlueprint",
            "ShaderStageSpec",
            "VulkanDeviceProfile",
            "VulkanPipelinePlan",
            "VulkanValidationError",
            "plan_vulkan_pipeline",
        ),
    ),
    (
        "life",
        "生命游戏格点的演化调优。",
        (
            "LifeLattice",
            "LifeOptimisationResult",
            "optimise_game_of_life",
            "optimise_game_of_life_multistep",
        ),
    ),
    (
        "life_tools",
        "日常自我照护工具箱的仪式化安排。",
        (
            "LifeNeed",
            "ToolRitual",
            "design_hydration_ritual",
            "design_meal_landscape",
            "design_energy_breaks",
            "assemble_life_toolkit",
        ),
    ),
    (
        "rule_optimisation",
        "规则权重的梯度化调节。",
        (
            "RuleOptimisationResult",
            "optimise_rule_weights",
        ),
    ),
    (
        "degree_space",
        "度空间的张量结构与对偶。",
        (
            "DegreeSpace",
            "DegreeDual",
            "DegreeTensor",
            "tensor_product",
        ),
    ),
    (
        "metaverse",
        "元宇宙蓝图与爱的绑定策略。",
        (
            "MetaverseBlueprint",
            "bond_metaverse_with_love",
            "ideal_metaverse_universe",
            "metaverse_metric",
            "run_ideal_metaverse",
        ),
    ),
    (
        "mihoyo",
        "米哈游工作室与美羽的结盟轨迹。",
        (
            "MihoyoStudioBlueprint",
            "MiyuCreativeProfile",
            "MiyuJoinsMihoyoResult",
            "bond_miyu_with_mihoyo",
            "mihoyo_alignment_metric",
            "measure_mihoyo_fengshui",
            "mihoyo_progress_metric",
            "miyu_join_mihoyo_universe",
            "run_miyu_join_mihoyo",
        ),
    ),
    (
        "meta_spacetime",
        "元时空蓝图与理想化运行。",
        (
            "MetaSpacetimeBlueprint",
            "ideal_meta_spacetime_universe",
            "meta_spacetime_metric",
            "run_meta_spacetime",
        ),
    ),
    (
        "complex_dynamics",
        "复杂动力系统的迭代设计。",
        (
            "ComplexDynamicsBlueprint",
            "complex_dynamics_metric",
            "design_complex_dynamics_universe",
            "run_complex_dynamics",
        ),
    ),
    (
        "complex_network",
        "复杂网络宇宙与指标体系。",
        (
            "ComplexNetworkBlueprint",
            "complex_network_metric",
            "ideal_complex_network_universe",
            "run_complex_network",
        ),
    ),
    (
        "cooperation_evolution",
        "合作演化动力学的策略演进。",
        (
            "CooperationParameters",
            "CooperationState",
            "DEFAULT_COOPERATION_STATE",
            "evolve_cooperation",
            "run_cooperation_evolution",
        ),
    ),
    (
        "llm_cooperation",
        "多智能体协作蓝图与指标。",
        (
            "LLMAgentContribution",
            "LLMCooperationBlueprint",
            "DEFAULT_LLM_COOPERATION",
            "ideal_llm_cooperation_universe",
            "llm_cooperation_blueprint_from_agents",
            "llm_cooperation_metric",
            "run_llm_cooperation",
        ),
    ),
    (
        "s_follow_reading",
        "S跟读学习朋友合作网络的协作推进规则。",
        (
            "FollowReadingFriendProfile",
            "FollowReadingBlueprint",
            "DEFAULT_FOLLOW_READING_STATE",
            "follow_reading_blueprint_from_friends",
            "follow_reading_rules",
            "follow_reading_metric",
            "follow_reading_universe",
            "run_follow_reading_network",
        ),
    ),
    (
        "everything_demonstration",
        "万物演示计划的物理化执行。",
        (
            "EverythingDemonstrationBlueprint",
            "physical_everything_demonstration_universe",
            "physical_everything_metric",
            "run_physical_everything_demonstration",
        ),
    ),
    (
        "drug_lab",
        "药物实验室宇宙的调参策略。",
        (
            "DrugLabOptimisationResult",
            "drug_lab_metric",
            "ideal_drug_lab_universe",
            "run_drug_lab",
        ),
    ),
    (
        "tianhe",
        "天和线的轨迹建模。",
        (
            "TianheLine",
            "天和线",
        ),
    ),
    (
        "catalysis",
        "缠子与纠子在催化场景中的协同。",
        (
            "CatalysisOutcome",
            "Chanzi",
            "Jiuzi",
            "catalyse_jiuzi_and_chanzi",
        ),
    ),
    (
        "theorem",
        "定理证明器与推理规则。",
        (
            "InferenceRule",
            "Proof",
            "ProofStep",
            "modus_ponens",
            "reconstruct_proof",
            "validate_proof",
            "run_theorem_prover",
            "theorem_metric",
            "theorem_proving_universe",
        ),
    ),
    (
        "elf_usdt",
        "ELF/USDT 市场的交换模型。",
        (
            "ELFUSDTMarket",
            "SwapDirection",
            "SwapEvent",
            "ELF",
            "USDT",
            "精灵",
            "泰达",
        ),
    ),
    (
        "adhd",
        "注意力缺陷情境下的参与度模拟。",
        (
            "StimulusProfile",
            "ADHDResponse",
            "ADHDProfile",
            "CoefficientOfEngagement",
            "simulate_coe",
        ),
    ),
    (
        "logic",
        "非子与若非的逻辑演算。",
        (
            "Feizi",
            "Ouzi",
            "Ruofei",
            "非子",
            "欧子",
            "若非",
        ),
    ),
    (
        "xuyueming",
        "许月明倒拔垂杨柳的技法筹划。",
        (
            "WillowBranch",
            "WeepingWillow",
            "WillowUprootPlan",
            "XuYuemingTechnique",
            "UprootStep",
            "倒拔垂杨柳",
            "许月明",
        ),
    ),
    (
        "shengbing",
        "生病等价放屁的幽默同构。",
        (
            "ConceptCongruence",
            "生病全等于放屁",
        ),
    ),
    (
        "utawarerumono",
        "传颂之物的吟唱结构。",
        (
            "Utawarerumono",
            "UtawarerumonoChant",
            "LegendChant",
            "传颂之物",
        ),
    ),
    (
        "touhou_project",
        "幻想乡异变与博丽灵梦的解题探索。",
        (
            "TouhouIncidentBlueprint",
            "TouhouIncidentState",
            "TOUHOU_DEFAULT_BLUEPRINT",
            "touhou_incident_universe",
            "touhou_incident_metric",
            "run_touhou_incident",
            "ReimuNextSolution",
            "reimu_next_solution",
            "博丽灵梦下一解",
        ),
    ),
    (
        "world",
        "世界执行请求的编排器。",
        (
            "WorldExecutionRequest",
            "world_execute",
        ),
    ),
    (
        "earth_rescue",
        "地球拯救计划的策略映射。",
        (
            "EarthState",
            "RescueParameters",
            "rescue_map",
            "save_earth",
        ),
    ),
    (
        "shuangxiang",
        "双相梯度下降与相关优化。",
        (
            "BiphasicState",
            "BiphasicOptimisationResult",
            "continue_biphasic_descent",
            "optimise_biphasic_state",
            "双相",
            "双相梯度下降",
            "继续梯度下降",
        ),
    ),
)

STATION_BLUEPRINT: tuple[StationLayout, ...] = restructure_information_architecture(
    _RAW_STATION_BLUEPRINT
)

def build_guidance_desk(symbols: Mapping[str, object]) -> GuidanceDesk:
    """Materialise the shared :class:`GuidanceDesk` from ``symbols``.

    ``symbols`` should contain all exports referenced in :data:`STATION_BLUEPRINT`.
    The helper centralises construction logic so documentation tooling and the
    public :func:`compute_god.guidance_desk` helper share the same catalogue
    definition.
    """

    return GuidanceDesk(
        DeskStation(name, description, {symbol: symbols[symbol] for symbol in symbol_names})
        for name, description, symbol_names in STATION_BLUEPRINT
    )


def iter_export_names() -> Iterator[str]:
    """Yield the public export names declared in :data:`STATION_BLUEPRINT`."""

    seen: set[str] = set()
    for _, _, symbol_names in STATION_BLUEPRINT:
        for symbol in symbol_names:
            if symbol not in seen:
                seen.add(symbol)
                yield symbol


__all__ = ["StationLayout", "STATION_BLUEPRINT", "build_guidance_desk", "iter_export_names"]
